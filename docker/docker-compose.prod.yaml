# Production-ready Airflow cluster configuration with CeleryExecutor

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true
  db:
    driver: bridge
    internal: true

volumes:
  postgres-db-volume:
  postgres-backup:
  airflow_dags:
  airflow_logs:
  airflow_plugins:
  redis-data:
  nginx-certs:
  nginx-logs:

services:
  # ============= VOLUME INIT =============
  volume-init:
    image: busybox:latest
    container_name: volume_init
    user: "0:0"
    volumes:
      - airflow_dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - airflow_plugins:/opt/airflow/plugins
    command: >
      sh -c "
      echo 'Creating Airflow directories...' &&
      mkdir -p /opt/airflow/logs &&
      mkdir -p /opt/airflow/logs/scheduler &&
      mkdir -p /opt/airflow/logs/dag_processor_manager &&
      mkdir -p /opt/airflow/dags &&
      mkdir -p /opt/airflow/plugins &&
      echo 'Setting permissions to 777 for all directories...' &&
      chmod -R 777 /opt/airflow &&
      echo 'Verifying permissions...' &&
      ls -la /opt/airflow/ &&
      echo 'Volume initialization complete!'
      "
    restart: "no"

  # ============= DATABASE LAYER =============
  postgres:
    image: ayushghimire95/postgre:linux
    container_name: postgres_prod
    networks:
      - db
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow123
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:8.10
    container_name: pgadmin_prod
    networks:
      - db
      - backend
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@yourdomain.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  # ============= CACHE LAYER =============
  redis:
    image: redis:7.2-alpine
    container_name: redis_prod
    networks:
      - backend
    command: redis-server --requirepass redis123
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # ============= AIRFLOW INIT =============
  airflow-init:
    image: apache/airflow:2.9.1
    container_name: airflow_init
    user: "50000:0"
    networks:
      - backend
      - db
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow123@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:redis123@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: d7I2QzTuWsVmCKqVJADzxrDf1A5QvK-lP6M7nXyZaBQ=
      AIRFLOW__WEBSERVER__SECRET_KEY: airflow-secret-key-change-me
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__LOGGING__BASE_LOG_FOLDER: /opt/airflow/logs
      AIRFLOW__LOGGING__DAG_PROCESSOR_MANAGER_LOG_LOCATION: /opt/airflow/logs/dag_processor_manager/dag_processor_manager.log
    volumes:
      - airflow_dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - airflow_plugins:/opt/airflow/plugins
    entrypoint: /bin/bash
    command: >
      -c "
      echo 'Waiting for volume initialization...' &&
      sleep 5 &&
      echo 'Checking directory permissions...' &&
      ls -la /opt/airflow/ &&
      echo 'Running database migration...' &&
      airflow db migrate &&
      echo 'Creating admin user...' &&
      airflow users create --role Admin --username admin --email admin@example.com --firstname Admin --lastname User --password admin123 || true &&
      echo 'Airflow initialization complete!'
      "
    depends_on:
      volume-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: "no"

  # ============= AIRFLOW SERVICES =============
  airflow-webserver:
    image: apache/airflow:2.9.1
    container_name: airflow_webserver
    user: "50000:0"
    networks:
      - backend
      - db
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow123@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:redis123@redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow123@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: d7I2QzTuWsVmCKqVJADzxrDf1A5QvK-lP6M7nXyZaBQ=
      AIRFLOW__WEBSERVER__SECRET_KEY: airflow-secret-key-change-me
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__LOGGING__BASE_LOG_FOLDER: /opt/airflow/logs
    volumes:
      - airflow_dags:/opt/airflow/dags:ro
      - airflow_logs:/opt/airflow/logs
      - airflow_plugins:/opt/airflow/plugins:ro
    command: airflow webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    image: apache/airflow:2.9.1
    container_name: airflow_scheduler
    user: "50000:0"
    networks:
      - backend
      - db
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow123@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:redis123@redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow123@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: d7I2QzTuWsVmCKqVJADzxrDf1A5QvK-lP6M7nXyZaBQ=
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__LOGGING__BASE_LOG_FOLDER: /opt/airflow/logs
      AIRFLOW__SCHEDULER__CHILD_PROCESS_LOG_DIRECTORY: /opt/airflow/logs/scheduler
    volumes:
      - airflow_logs:/opt/airflow/logs
      - airflow_dags:/opt/airflow/dags:ro
      - airflow_plugins:/opt/airflow/plugins:ro
    command: airflow scheduler
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname ${HOSTNAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-worker-1:
    image: apache/airflow:2.9.1
    container_name: airflow_worker_1
    user: "50000:0"
    networks:
      - backend
      - db
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow123@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:redis123@redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow123@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: d7I2QzTuWsVmCKqVJADzxrDf1A5QvK-lP6M7nXyZaBQ=
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__LOGGING__BASE_LOG_FOLDER: /opt/airflow/logs
    volumes:
      - airflow_dags:/opt/airflow/dags:ro
      - airflow_logs:/opt/airflow/logs
      - airflow_plugins:/opt/airflow/plugins:ro
    command: celery worker
    restart: unless-stopped
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-worker-2:
    image: apache/airflow:2.9.1
    container_name: airflow_worker_2
    user: "50000:0"
    networks:
      - backend
      - db
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow123@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:redis123@redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow123@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: d7I2QzTuWsVmCKqVJADzxrDf1A5QvK-lP6M7nXyZaBQ=
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__LOGGING__BASE_LOG_FOLDER: /opt/airflow/logs
    volumes:
      - airflow_dags:/opt/airflow/dags:ro
      - airflow_logs:/opt/airflow/logs
      - airflow_plugins:/opt/airflow/plugins:ro
    command: celery worker
    restart: unless-stopped
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-flower:
    image: apache/airflow:2.9.1
    container_name: airflow_flower
    user: "50000:50000"
    networks:
      - backend
    environment:
      AIRFLOW__CELERY__BROKER_URL: redis://:redis123@redis:6379/0
      AIRFLOW__CELERY__FLOWER_BASIC_AUTH: admin:admin123
    command: celery flower
    ports:
      - "5555:5555"
    restart: unless-stopped
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  # ============= APPLICATION SERVICES =============
  api:
    image: tiangolo/uvicorn-gunicorn-fastapi:python3.10
    container_name: fastapi_prod
    networks:
      - backend
      - db
    environment:
      DB_NAME: airflow
      DB_USER: airflow
      DB_PASSWORD: airflow123
      DB_HOST: postgres
      DB_PORT: 5432
      GEMINI_API_KEY: your-gemini-api-key-here
    ports:
      - "8000:8000"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  streamlit:
    image: python:3.10-slim
    container_name: streamlit_prod
    networks:
      - backend
      - db
    environment:
      DB_NAME: airflow
      DB_USER: airflow
      DB_PASSWORD: airflow123
      DB_HOST: postgres
      DB_PORT: 5432
    ports:
      - "8501:8501"
    command: >
      bash -c "
      pip install streamlit && 
      streamlit run /src/dashboard/app.py --server.port=8501 --server.address=0.0.0.0
      "
    restart: unless-stopped
    volumes:
      - ./dashboard:/src/dashboard:ro
    depends_on:
      postgres:
        condition: service_healthy

  # ============= REVERSE PROXY =============
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx_prod
    networks:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    restart: unless-stopped
    depends_on:
      - api
      - streamlit
      - airflow-webserver